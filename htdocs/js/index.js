// Generated by CoffeeScript 1.10.0
(function() {
  var Gene, Population, SETTING, Sentence;

  SETTING = {
    USABLE_STRING: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz .!?",
    POPULATION_MEMBER_COUNT: 20
  };

  Math.randomNumber = function(max) {
    return this.floor(this.random() * max);
  };

  Math.upOrDown = function() {
    if (0.5 < this.random()) {
      return 1;
    } else {
      return -1;
    }
  };

  Sentence = (function() {
    function Sentence(goal) {
      this.goal = goal;
      this.usable = SETTING.USABLE_STRING.split("");
    }

    Sentence.prototype.random = function() {
      return this.usable[Math.randomNumber(this.usable.length)];
    };

    Sentence.prototype.change = function(char) {
      var index, ref;
      index = this.usable.indexOf(char) + Math.upOrDown() - this.usable.length;
      return (ref = this.usable.slice(index, index + 1)[0]) != null ? ref : this.usable.slice(-1)[0];
    };

    Sentence.prototype.diff = function(compareTo) {
      var diffs, i, j, ref;
      diffs = 0;
      for (i = j = 0, ref = compareTo.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        diffs += Math.abs(this.usable.indexOf(compareTo[i]) - this.usable.indexOf(this.goal[i]));
      }
      return diffs;
    };

    Sentence.prototype.goalLength = function() {
      return this.goal.length;
    };

    return Sentence;

  })();

  Gene = (function() {
    function Gene(code1, sentence) {
      this.code = code1;
      this.sentence = sentence;
    }

    Gene.prototype.cost = function() {
      return this.sentence.diff(this.code);
    };

    Gene.prototype.mate = function(another) {
      var child1code, child2code, pivot;
      pivot = Math.randomNumber(this.code.length);
      child1code = this.code.slice(0, pivot).concat(another.code.slice(pivot));
      child2code = another.code.slice(0, pivot).concat(this.code.slice(pivot));
      return [new Gene(child1code, this.sentence), new Gene(child2code, this.sentence)];
    };

    Gene.prototype.mutate = function() {
      var changeCodeIndexes, i, newCode, s;
      if (0.3 < Math.random()) {
        return;
      }
      changeCodeIndexes = (function() {
        var j, results;
        results = [];
        for (i = j = 0; j < 3; i = ++j) {
          results.push(Math.randomNumber(this.code.length));
        }
        return results;
      }).call(this);
      newCode = (function() {
        var j, len, ref, results;
        ref = this.code;
        results = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          s = ref[i];
          if (0 <= changeCodeIndexes.indexOf(i)) {
            results.push(this.sentence.change(s));
          } else {
            results.push(s);
          }
        }
        return results;
      }).call(this);
      return this.code = newCode;
    };

    Gene.prototype.isGoal = function() {
      return this.cost() === 0;
    };

    return Gene;

  })();

  Population = (function() {
    function Population(sentence) {
      var code, i;
      this.sentence = sentence;
      this.generationNumber = 0;
      this.members = (function() {
        var j, ref, results;
        results = [];
        for (i = j = 0, ref = SETTING.POPULATION_MEMBER_COUNT; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
          code = (function() {
            var k, ref1, results1;
            results1 = [];
            for (i = k = 0, ref1 = this.sentence.goalLength(); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
              results1.push(this.sentence.random());
            }
            return results1;
          }).call(this);
          results.push(new Gene(code, this.sentence));
        }
        return results;
      }).call(this);
    }

    Population.prototype.mate = function() {
      var children;
      children = this.members[0].mate(this.members[1]);
      return this.members.splice(this.members.length - 2, 2, children[0], children[1]);
    };

    Population.prototype.mutate = function() {
      var j, len, member, ref, results;
      ref = this.members;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        member = ref[j];
        results.push(member.mutate());
      }
      return results;
    };

    Population.prototype.sort = function() {
      return this.members.sort(function(a, b) {
        return a.cost() - b.cost();
      });
    };

    Population.prototype.display = function() {
      var genes, member;
      genes = (function() {
        var j, len, ref, results;
        ref = this.members;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          member = ref[j];
          results.push(member.code.join(""));
        }
        return results;
      }).call(this);
      $("#result").html((this.generationNumber + "世代\r\n") + genes.join("\r\n") + "\r\n\r\n" + $("#result").html());
      return console.log((this.generationNumber + "世代\r\n") + genes.join("\r\n") + "\r\n\r\n");
    };

    Population.prototype.hasGoalGene = function() {
      var j, len, member, ref;
      ref = this.members;
      for (j = 0, len = ref.length; j < len; j++) {
        member = ref[j];
        if (member.isGoal()) {
          return true;
        }
      }
      return false;
    };

    Population.prototype.generate = function() {
      this.mate();
      this.mutate();
      this.sort();
      this.display();
      if (this.hasGoalGene()) {
        return;
      }
      this.generationNumber++;
      return this.generate();
    };

    return Population;

  })();

  $("#search").click(function() {
    return new Population(new Sentence($("#input").val())).generate();
  });

}).call(this);
